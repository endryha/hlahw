upstream app {
    least_conn;

    server 12_load_balancer_app_1:8080;
    server 12_load_balancer_app_2:8080;
    server 12_load_balancer_app_3:8080;
    server 12_load_balancer_app_4:8080 backup;
}

lua_shared_dict healthcheck 1m;
lua_socket_log_errors off;

init_worker_by_lua_block {
    local hc = require "resty.upstream.healthcheck"

    local ok, err = hc.spawn_checker {
        shm = "healthcheck",  -- defined by "lua_shared_dict"
        upstream = "app", -- defined by "upstream"
        type = "http",

        http_req = "GET /actuator/health HTTP/1.0\r\nHost: app\r\n\r\n",

        interval = 2000,  -- run the check cycle every 2 sec
        timeout = 1000,   -- 1 sec is the timeout for network operations
        fall = 3,  -- # of successive failures before turning a peer down
        rise = 2,  -- # of successive successes before turning a peer up
        valid_statuses = {200, 302},  -- a list valid HTTP status code
        concurrency = 10,  -- concurrency level for test requests
    }

    if not ok then
        ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
        return
    end
}

server {
    listen 80;

    proxy_send_timeout 5s;
    proxy_read_timeout 5s;
    proxy_connect_timeout 5s;

    location = /status {
        access_log off;

        default_type text/plain;
        content_by_lua_block {
            local hc = require "resty.upstream.healthcheck"
            ngx.say("Nginx Worker PID: ", ngx.worker.pid())
            ngx.print(hc.status_page())
        }
    }

    location / {
        proxy_pass http://app;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
        proxy_http_version 1.1;
        # Remove the Connection header if the client sends it,
        # it could be "close" to close a keepalive connection
        proxy_set_header Connection "";
    }
}
